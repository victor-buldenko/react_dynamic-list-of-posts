{"version":3,"sources":["store.ts","utils/fetchClient.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["initialUser","name","id","email","phone","Store","create","set","users","selectedUser","posts","selectedPost","postComments","postCommentsLoading","postCommentsError","isPostsLoading","showSidebar","showAddForm","setUsers","arg","state","setSelectedUser","user","setPosts","setSelectedPost","setIsPostsLoading","setShowSidebar","setPostComments","setPostCommentsLoading","setPostCommentsError","setShowAddForm","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","PostsList","className","map","post","title","type","cn","onClick","res","Array","isArray","catch","Error","finally","postButtonHandler","Loader","NewCommentForm","useState","sendLoading","setSendLoading","authorName","authorEmail","comment","setUserData","isNameEmpty","isEmailEmpty","isCommentEmpty","setIsInputEmpty","onSubmit","e","preventDefault","postId","userData","err","message","htmlFor","placeholder","value","onChange","target","onBlur","trim","PostDetails","length","href","commentID","postID","UserSelector","isDropdown","setIsDropdown","role","event","selectHandler","App","isError","setIsError","useEffect","error","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfa71cd8.chunk.js","sourcesContent":["import { create } from 'zustand';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\ninterface IState {\n  users: User[];\n  selectedUser: User;\n  posts: Post[] | null;\n  selectedPost: Post | null;\n  postComments: Comment[] | null;\n  postCommentsLoading: boolean;\n  postCommentsError: boolean,\n  isPostsLoading: boolean;\n  showSidebar: number;\n  showAddForm: boolean;\n  setUsers: (arg: User[]) => void;\n  setSelectedUser: (arg: User) => void;\n  setPosts: (arg: Post[] | null) => void;\n  setSelectedPost: (arg: Post) => void;\n  setIsPostsLoading: (arg: boolean) => void;\n  setShowSidebar: (arg: number) => void;\n  setPostComments: (arg: Comment[]) => void;\n  setPostCommentsError: (arg: boolean) => void;\n  setPostCommentsLoading: (arg: boolean) => void;\n  setShowAddForm: (arg: boolean) => void;\n}\n\nconst initialUser = {\n  name: '',\n  id: 0,\n  email: '',\n  phone: '',\n};\n\nexport const Store = create<IState>((set) => ({\n  users: [],\n  selectedUser: initialUser,\n  posts: null,\n  selectedPost: null,\n  postComments: null,\n  postCommentsLoading: true,\n  postCommentsError: false,\n  isPostsLoading: false,\n  showSidebar: -1,\n  showAddForm: false,\n  setUsers: (arg) => set((state) => ({ ...state, users: arg })),\n  setSelectedUser: (user) => {\n    set((state) => ({ ...state, selectedUser: user }));\n  },\n  setPosts: (arg) => set((state) => ({ ...state, posts: arg })),\n  setSelectedPost:\n    (arg: Post) => set((state) => ({ ...state, selectedPost: arg })),\n  setIsPostsLoading:\n    (arg) => set((state) => ({ ...state, isPostsLoading: arg })),\n  setShowSidebar: (arg) => set((state) => ({ ...state, showSidebar: arg })),\n  setPostComments:\n    (arg: Comment[]) => set((state) => ({ ...state, postComments: arg })),\n  setPostCommentsLoading:\n    (arg) => set((state) => ({ ...state, postCommentsLoading: arg })),\n  setPostCommentsError:\n    (arg) => set((state) => ({ ...state, postCommentsError: arg })),\n  setShowAddForm: (arg) => set(state => ({ ...state, showAddForm: arg })),\n}));\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { Store } from '../store';\nimport { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const PostsList: React.FC = () => {\n  const {\n    posts,\n    showSidebar,\n    setSelectedPost,\n    setShowSidebar,\n    setPostComments,\n    setPostCommentsLoading,\n    setPostCommentsError,\n  } = Store();\n\n  const postButtonHandler = (post: Post) => {\n    setPostCommentsLoading(true);\n    if (showSidebar === post.id) {\n      setShowSidebar(-1);\n    } else {\n      setSelectedPost(post);\n      setShowSidebar(post.id);\n      client\n        .get(`/comments?postId=${post.id}`)\n        .then((res) => {\n          if (Array.isArray(res)) {\n            setPostComments(res);\n          } else {\n            throw res;\n          }\n        })\n        .catch((res) => {\n          setPostCommentsError(true);\n          Error(res);\n        })\n        .finally(() => {\n          setPostCommentsLoading(false);\n        });\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts?.map((post) => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">{post.title}</td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn('button is-link', {\n                    'is-light': showSidebar !== post.id,\n                  })}\n                  onClick={() => postButtonHandler(post)}\n                >\n                  {showSidebar === post.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable react/button-has-type */\nimport React, { ChangeEvent, FormEvent, useState } from 'react';\nimport cn from 'classnames';\nimport { Store } from '../store';\nimport { client } from '../utils/fetchClient';\n\nexport const NewCommentForm: React.FC = () => {\n  const {\n    selectedPost,\n    setPostComments,\n    setPostCommentsError,\n    setPostCommentsLoading,\n  } = Store();\n\n  const [sendLoading, setSendLoading] = useState(false);\n  const [{\n    authorName,\n    authorEmail,\n    comment,\n  }, setUserData] = useState({\n    authorName: '',\n    authorEmail: '',\n    comment: '',\n  });\n\n  const [{\n    isNameEmpty,\n    isEmailEmpty,\n    isCommentEmpty,\n  }, setIsInputEmpty] = useState({\n    isNameEmpty: false,\n    isEmailEmpty: false,\n    isCommentEmpty: false,\n  });\n\n  const commentHandler = (e: React.FocusEvent<HTMLTextAreaElement>) => {\n    setUserData(userData => ({ ...userData, comment: e.target.value.trim() }));\n    setIsInputEmpty(state => ({ ...state, isCommentEmpty: false }));\n  };\n\n  const emailFieldHandler = (e: React.FocusEvent<HTMLInputElement>) => {\n    setUserData(\n      userData => ({ ...userData, authorEmail: e.target.value.trim() }),\n    );\n    setIsInputEmpty(state => ({ ...state, isEmailEmpty: false }));\n  };\n\n  const nameHandler = (e: React.FocusEvent<HTMLInputElement>) => {\n    setUserData(\n      userData => ({ ...userData, authorName: e.target.value.trim() }),\n    );\n    setIsInputEmpty(state => ({ ...state, isNameEmpty: false }));\n  };\n\n  const onChangeNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setUserData((userData) => ({ ...userData, authorName: e.target.value }));\n  };\n\n  const onChangeEmailHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setUserData((userData) => ({ ...userData, authorEmail: e.target.value }));\n  };\n\n  const onChangeCommentHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    setUserData((userData) => ({ ...userData, comment: e.target.value }));\n  };\n\n  const resetForm = () => {\n    setUserData({\n      authorName: '',\n      authorEmail: '',\n      comment: '',\n    });\n\n    setIsInputEmpty({\n      isNameEmpty: false,\n      isEmailEmpty: false,\n      isCommentEmpty: false,\n    });\n  };\n\n  const formHandler = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const state = {\n      isNameEmpty: false,\n      isEmailEmpty: false,\n      isCommentEmpty: false,\n    };\n\n    if (!authorName) {\n      state.isNameEmpty = true;\n    }\n\n    if (!authorEmail) {\n      state.isEmailEmpty = true;\n    }\n\n    if (!comment) {\n      state.isCommentEmpty = true;\n    }\n\n    if (state.isNameEmpty\n        || state.isEmailEmpty\n        || state.isCommentEmpty) {\n      setIsInputEmpty(state);\n\n      return;\n    }\n\n    setSendLoading(true);\n\n    client.post('/comments', {\n      postId: selectedPost?.id,\n      name: authorName,\n      email: authorEmail,\n      body: comment,\n    })\n      .then(() => {\n        client\n          .get(`/comments?postId=${selectedPost?.id}`)\n          .then((res) => {\n            if (Array.isArray(res)) {\n              setPostComments(res);\n            } else {\n              throw res;\n            }\n          })\n          .catch((res) => {\n            setPostCommentsError(true);\n            Error(res);\n          })\n          .finally(() => {\n            setPostCommentsLoading(false);\n          });\n      })\n      .then(() => setUserData(userData => ({ ...userData, comment: '' })))\n      .catch(err => new Error(err.message))\n      .finally(() => setSendLoading(false));\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={formHandler}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': isNameEmpty })}\n            value={authorName}\n            onChange={onChangeNameHandler}\n            onBlur={nameHandler}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          <span\n            className={\n              cn('icon', 'is-small', 'is-right',\n                { 'has-text-danger': isNameEmpty })\n            }\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        {isNameEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': isEmailEmpty })}\n            value={authorEmail}\n            onChange={onChangeEmailHandler}\n            onBlur={emailFieldHandler}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          <span\n            className={\n              cn('icon', 'is-small', 'is-right',\n                { 'has-text-danger': isEmailEmpty })\n            }\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        {isEmailEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            value={comment}\n            className={cn('textarea', { 'is-danger': isCommentEmpty })}\n            onChange={onChangeCommentHandler}\n            onBlur={commentHandler}\n          />\n        </div>\n\n        {isCommentEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button', 'is-link', { 'is-loading': sendLoading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Store } from '../store';\nimport { client } from '../utils/fetchClient';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    selectedPost,\n    postComments,\n    postCommentsLoading,\n    postCommentsError,\n    showAddForm,\n    setPostComments,\n    setPostCommentsError,\n    setPostCommentsLoading,\n    setShowAddForm,\n  }\n    = Store();\n\n  const deleteComment = (commentID: number, postID: number) => {\n    client.delete(`/comments/${commentID}`)\n      .then(() => {\n        setPostCommentsLoading(true);\n        client.get(`/comments?postId=${postID}`)\n          .then((res) => {\n            if (Array.isArray(res)) {\n              setPostComments(res);\n            } else {\n              throw res;\n            }\n          })\n          .catch((res) => {\n            setPostCommentsError(true);\n            Error(res);\n          })\n          .finally(() => {\n            setPostCommentsLoading(false);\n          });\n      })\n      .catch(err => new Error(err.message));\n  };\n\n  return (\n    selectedPost && (\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"content\" data-cy=\"PostDetails\">\n          <div className=\"block\">\n            <h2 data-cy=\"PostTitle\">\n              {`#${selectedPost.id}: ${selectedPost.title}`}\n            </h2>\n\n            <p data-cy=\"PostBody\">{selectedPost.body}</p>\n          </div>\n\n          {postCommentsLoading ? (\n            <Loader />\n          ) : (\n            <div className=\"block\">\n              {postCommentsError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {postComments?.length === 0 && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n\n              {postComments && (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n                  {postComments.map((comment) => (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                      key={comment.id}\n                    >\n                      <div className=\"message-header\">\n                        <a\n                          href={comment.email}\n                          data-cy=\"CommentAuthor\"\n                        >\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={\n                            () => deleteComment(comment.id, comment.postId)\n                          }\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  ))}\n                </>\n              )}\n\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setShowAddForm(true)}\n              >\n                Write a comment\n              </button>\n            </div>\n          )}\n\n          {showAddForm && <NewCommentForm />}\n        </div>\n      </div>\n    )\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { Store } from '../store';\nimport { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const UserSelector: React.FC = () => {\n  const {\n    users,\n    selectedUser,\n    setSelectedUser,\n    setPosts,\n    setIsPostsLoading,\n    setShowSidebar,\n  } = Store();\n  const [isDropdown, setIsDropdown] = useState(false);\n\n  const selectHandler = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    user: User,\n  ) => {\n    e.preventDefault();\n    setSelectedUser(user);\n    setIsDropdown(!isDropdown);\n    setIsPostsLoading(true);\n    setShowSidebar(-1);\n    client\n      .get(`/posts?userId=${user.id}`)\n      .then((res) => {\n        if (Array.isArray(res) && res.length) {\n          setPosts(res);\n        } else {\n          setPosts([]);\n        }\n      })\n      .catch()\n      .finally(() => setIsPostsLoading(false));\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', { 'is-active': isDropdown })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdown(!isDropdown)}\n        >\n          <span>{selectedUser.name ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => (\n            <a\n              href={`user-${user.id}`}\n              className={cn('dropdown-item', {\n                'is-active': user.id === selectedUser.id,\n              })}\n              key={user.id}\n              onClick={(event) => selectHandler(event, user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { client } from './utils/fetchClient';\nimport { Store } from './store';\n\nexport const App: React.FC = () => {\n  const {\n    setUsers, selectedUser, posts, isPostsLoading, showSidebar,\n  }\n    = Store();\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    client\n      .get('/users')\n      .then((res) => {\n        if (Array.isArray(res)) {\n          setUsers(res);\n        } else {\n          throw res;\n        }\n      })\n      .catch((error) => {\n        setIsError(true);\n        Error(error.message);\n      });\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser.name && (\n                  <p data-cy=\"NoSelectedUser\">No user selected</p>\n                )}\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isPostsLoading && <Loader />}\n                {!isPostsLoading && posts?.length === 0 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {posts && posts?.length > 0 && <PostsList />}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': showSidebar >= 0,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}